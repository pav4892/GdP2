#include "route.h"
#include "vertical.h"

using namespace std;

Route::Route(const float pHeight, const function<float(float, float, float, float, float)> pDist) {
  height = pHeight;
  dist = pDist;
};

Route::Route(const Route& route) {
  destinations = route.destinations;
  height = route.height;
  dist = route.dist;
};

Route::~Route() {};

void Route::add(const float destX, const float destY) {
  destinations.emplace_back(destX, destY);
};

const vector<pair<float, float>>& Route::getDestinations() const {
  return destinations;
};

float Route::getHeight() const {
  return height;
};

void Route::setHeight(const float pHeight) {
  height = pHeight;
};

void Route::setDist(const function<float(float, float, float, float, float)> pDist) {
  dist = pDist;
};


float Route::distance() const {

    float distanceTotal = 0.0;
    int destinationsArrLength = destinations.size(); // Get arrayLength for iteratior later...

    if(destinationsArrLength == 0) {
        return 0.0;
    }

        // Start flight from origin to first
        distanceTotal += dist(0.0, 0.0, destinations[0].first, destinations[0].second, height);

            if(destinationsArrLength > 1) {
                // Intermediate flights
                for (int i = 0; i < destinationsArrLength - 1; i++) {
                    distanceTotal += dist(destinations[i].first, destinations[i].second, destinations[i + 1].first, destinations[i + 1].second, height);
                }
            }

        // Return flight
        distanceTotal += dist(destinations.back().first, destinations.back().second, 0.0, 0.0, height);

    return distanceTotal;
}

const Route Route::shortestRoute() const {
    if (destinations.empty()) return *this;

    vector<pair<float, float>> bestDestinations;
    float bestDist = 1000000000;

    // Work with a copy of destinations to permut(e/ate)?? directly
    vector<pair<float, float>> currentDestinations = destinations;

    // Need to pre-sort for permutation generation and iteration later(the whiel loop below)

    sort(currentDestinations.begin(), currentDestinations.end());

    // Go through each possible 

    while (next_permutation(currentDestinations.begin(), currentDestinations.end())) {

        float tempDist = 0.0f;
        tempDist += dist(0.0f, 0.0f, currentDestinations[0].first, currentDestinations[0].second, height);

        for (size_t i = 0; i < currentDestinations.size() - 1; ++i) {
            tempDist += dist(currentDestinations[i].first, currentDestinations[i].second, currentDestinations[i + 1].first, currentDestinations[i + 1].second, height);
        }

        tempDist += dist(currentDestinations.back().first, currentDestinations.back().second, 0.0f, 0.0f, height);

        if (tempDist < bestDist) {
            bestDist = tempDist;
            bestDestinations = currentDestinations;
    }
    } 
    // Build and return the best route
    Route best(height, dist);
    for (const auto& p : bestDestinations) {
        best.add(p.first, p.second);
    }

    return best;
}


